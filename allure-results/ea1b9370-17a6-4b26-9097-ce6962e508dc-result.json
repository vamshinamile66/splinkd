{"name": "test_select_payment_fully_paid", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" role=\"combobox\" aria-controls=\"radix-_r_co_\" aria-expanded=\"false\" aria-autocomplete=\"none\" dir=\"ltr\" data-state=\"closed\" data-slot=\"select-trigger\" data-size=\"default\" class=\"border-input data-[placeholder]:text-muted-foreground [&amp;_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex items-center justify-between gap-2 rounded-md border px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&amp;_svg]:pointer-events-none [&amp;_svg]:shrink-0 [&amp;_svg:not([class*='size-'])]:size-4 w-full bg-white cursor-pointer\">...</button> is not clickable at point (1329, 353). Other element would receive the click: <span>...</span>\n  (Session info: chrome=140.0.7339.128)\nStacktrace:\n\tGetHandleVerifier [0x0x5ed2a3+66419]\n\tGetHandleVerifier [0x0x5ed2e4+66484]\n\t(No symbol) [0x0x3c4bd3]\n\t(No symbol) [0x0x414e40]\n\t(No symbol) [0x0x4131a3]\n\t(No symbol) [0x0x410c57]\n\t(No symbol) [0x0x40fedd]\n\t(No symbol) [0x0x4043c5]\n\t(No symbol) [0x0x43101c]\n\t(No symbol) [0x0x403e24]\n\t(No symbol) [0x0x4311d4]\n\t(No symbol) [0x0x4528a1]\n\t(No symbol) [0x0x430e16]\n\t(No symbol) [0x0x4025ce]\n\t(No symbol) [0x0x4034a4]\n\tGetHandleVerifier [0x0x835ee3+2461619]\n\tGetHandleVerifier [0x0x830f66+2441270]\n\tGetHandleVerifier [0x0x616242+234258]\n\tGetHandleVerifier [0x0x606208+168664]\n\tGetHandleVerifier [0x0x60d1ad+197245]\n\tGetHandleVerifier [0x0x5f55f8+100040]\n\tGetHandleVerifier [0x0x5f5792+100450]\n\tGetHandleVerifier [0x0x5df74a+10266]\n\tBaseThreadInitThunk [0x0x7563fcc9+25]\n\tRtlGetAppContainerNamedObjectPath [0x0x776982ae+286]\n\tRtlGetAppContainerNamedObjectPath [0x0x7769827e+238]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2a9fcf360ab7b38f5cda57732df3d210\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    def test_select_payment_fully_paid(driver):\n        page = AssignAthletesToBatchPage(driver)\n>       page.select_payment_status_via_keys(\"Fully Paid\")\n\ntests\\test_assign_athletes_to_batch.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\assign_athletes_to_batch_page.py:84: in select_payment_status_via_keys\n    dropdown.click()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:121: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000017A3735F050>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...tRtlGetAppContainerNamedObjectPath [0x0x776982ae+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x7769827e+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" role=\"combobox\" aria-controls=\"radix-_r_co_\" aria-expanded=\"false\" aria-autocomplete=\"none\" dir=\"ltr\" data-state=\"closed\" data-slot=\"select-trigger\" data-size=\"default\" class=\"border-input data-[placeholder]:text-muted-foreground [&amp;_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex items-center justify-between gap-2 rounded-md border px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&amp;_svg]:pointer-events-none [&amp;_svg]:shrink-0 [&amp;_svg:not([class*='size-'])]:size-4 w-full bg-white cursor-pointer\">...</button> is not clickable at point (1329, 353). Other element would receive the click: <span>...</span>\nE         (Session info: chrome=140.0.7339.128)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x5ed2a3+66419]\nE       \tGetHandleVerifier [0x0x5ed2e4+66484]\nE       \t(No symbol) [0x0x3c4bd3]\nE       \t(No symbol) [0x0x414e40]\nE       \t(No symbol) [0x0x4131a3]\nE       \t(No symbol) [0x0x410c57]\nE       \t(No symbol) [0x0x40fedd]\nE       \t(No symbol) [0x0x4043c5]\nE       \t(No symbol) [0x0x43101c]\nE       \t(No symbol) [0x0x403e24]\nE       \t(No symbol) [0x0x4311d4]\nE       \t(No symbol) [0x0x4528a1]\nE       \t(No symbol) [0x0x430e16]\nE       \t(No symbol) [0x0x4025ce]\nE       \t(No symbol) [0x0x4034a4]\nE       \tGetHandleVerifier [0x0x835ee3+2461619]\nE       \tGetHandleVerifier [0x0x830f66+2441270]\nE       \tGetHandleVerifier [0x0x616242+234258]\nE       \tGetHandleVerifier [0x0x606208+168664]\nE       \tGetHandleVerifier [0x0x60d1ad+197245]\nE       \tGetHandleVerifier [0x0x5f55f8+100040]\nE       \tGetHandleVerifier [0x0x5f5792+100450]\nE       \tGetHandleVerifier [0x0x5df74a+10266]\nE       \tBaseThreadInitThunk [0x0x7563fcc9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x776982ae+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x7769827e+238]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"}, "start": 1758041621969, "stop": 1758041623090, "uuid": "52ef351f-87f0-4f40-866c-e2bef9b7570c", "historyId": "4f4ed51f88bea41f15ce6c4e563cca35", "testCaseId": "4f4ed51f88bea41f15ce6c4e563cca35", "fullName": "tests.test_assign_athletes_to_batch#test_select_payment_fully_paid", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_assign_athletes_to_batch"}, {"name": "host", "value": "OTSI-Lap80"}, {"name": "thread", "value": "92136-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_assign_athletes_to_batch"}]}