{"name": "test_register_academy_profile", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x6ca8a3+63283]\n\tGetHandleVerifier [0x0x6ca8e4+63348]\n\t(No symbol) [0x0x503e43]\n\t(No symbol) [0x0x54c8de]\n\t(No symbol) [0x0x54cc7b]\n\t(No symbol) [0x0x594ef2]\n\t(No symbol) [0x0x571464]\n\t(No symbol) [0x0x59271a]\n\t(No symbol) [0x0x571216]\n\t(No symbol) [0x0x540855]\n\t(No symbol) [0x0x5416f4]\n\tGetHandleVerifier [0x0x93bb43+2623955]\n\tGetHandleVerifier [0x0x936daa+2604090]\n\tGetHandleVerifier [0x0x6f069a+218410]\n\tGetHandleVerifier [0x0x6e0ed8+154984]\n\tGetHandleVerifier [0x0x6e742d+180925]\n\tGetHandleVerifier [0x0x6d22b8+94536]\n\tGetHandleVerifier [0x0x6d2442+94930]\n\tGetHandleVerifier [0x0x6bd5ea+9338]\n\tBaseThreadInitThunk [0x0x761afcc9+25]\n\tRtlGetAppContainerNamedObjectPath [0x0x778c82ae+286]\n\tRtlGetAppContainerNamedObjectPath [0x0x778c827e+238]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"197246dda67f3fcd31cbd42306a6acb1\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    def test_register_academy_profile(driver):\n        driver.get(config[\"base_url\"])\n        # Generate a unique email to avoid conflicts\n        captch_url= config[\"captch_url\"]\n        timestamp = int(time.time())\n        username = f\"qa{timestamp}@otsi.co.in\"\n        newpassword = config[\"signup\"][\"newpassword\"]\n        confirm_password = config[\"signup\"][\"confirmpassword\"]\n        # Initialize signup page and perform signup\n        academypage=RegisterAcademyPage(driver)\n>       academypage.signup(username,newpassword,confirm_password,captch_url)\n\ntests\\test_academy_registration.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\academy_registration_page.py:34: in signup\n    self.wait.until(EC.visibility_of_element_located(self.signup_link)).click()\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"197246dda67f3fcd31cbd42306a6acb1\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x00000166F201DA80>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x6ca8a3+63283]\nE       \tGetHandleVerifier [0x0x6ca8e4+63348]\nE       \t(No symbol) [0x0x503e43]\nE       \t(No symbol) [0x0x54c8de]\nE       \t(No symbol) [0x0x54cc7b]\nE       \t(No symbol) [0x0x594ef2]\nE       \t(No symbol) [0x0x571464]\nE       \t(No symbol) [0x0x59271a]\nE       \t(No symbol) [0x0x571216]\nE       \t(No symbol) [0x0x540855]\nE       \t(No symbol) [0x0x5416f4]\nE       \tGetHandleVerifier [0x0x93bb43+2623955]\nE       \tGetHandleVerifier [0x0x936daa+2604090]\nE       \tGetHandleVerifier [0x0x6f069a+218410]\nE       \tGetHandleVerifier [0x0x6e0ed8+154984]\nE       \tGetHandleVerifier [0x0x6e742d+180925]\nE       \tGetHandleVerifier [0x0x6d22b8+94536]\nE       \tGetHandleVerifier [0x0x6d2442+94930]\nE       \tGetHandleVerifier [0x0x6bd5ea+9338]\nE       \tBaseThreadInitThunk [0x0x761afcc9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x778c82ae+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x778c827e+238]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "start": 1756573868227, "stop": 1756573879408, "uuid": "30d58e8e-9ed4-413f-a694-27abf88490d9", "historyId": "294834fc52160b980c29b3228972a1ae", "testCaseId": "294834fc52160b980c29b3228972a1ae", "fullName": "tests.test_academy_registration#test_register_academy_profile", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_academy_registration"}, {"name": "host", "value": "OTSI-Lap80"}, {"name": "thread", "value": "77072-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_academy_registration"}]}