{"name": "test_login_correct_username_correct_password", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x0x98a8a3+63283]\n\tGetHandleVerifier [0x0x98a8e4+63348]\n\t(No symbol) [0x0x7c3ca0]\n\t(No symbol) [0x0x7ffb48]\n\t(No symbol) [0x0x8312d6]\n\t(No symbol) [0x0x82ceb5]\n\t(No symbol) [0x0x82c436]\n\t(No symbol) [0x0x795755]\n\t(No symbol) [0x0x795cae]\n\t(No symbol) [0x0x79613d]\n\tGetHandleVerifier [0x0xbfbb43+2623955]\n\tGetHandleVerifier [0x0xbf6daa+2604090]\n\tGetHandleVerifier [0x0x9b069a+218410]\n\tGetHandleVerifier [0x0x9a0ed8+154984]\n\tGetHandleVerifier [0x0x9a742d+180925]\n\t(No symbol) [0x0x795420]\n\t(No symbol) [0x0x794c36]\n\tGetHandleVerifier [0x0xd368fc+3913612]\n\tBaseThreadInitThunk [0x0x76b9fcc9+25]\n\tRtlGetAppContainerNamedObjectPath [0x0x777582ae+286]\n\tRtlGetAppContainerNamedObjectPath [0x0x7775827e+238]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a86167fb191fde278b9dcd5b79a02a4c\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    def test_login_correct_username_correct_password(driver):\n        \"\"\"Test login with correct username and correct password.\"\"\"\n>       driver.get(config[\"base_url\"])\n\ntests\\test_login.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:472: in get\n    self.execute(Command.GET, {\"url\": url})\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000019054A4AAD0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"\\\\tGetHa...tRtlGetAppContainerNamedObjectPath [0x0x777582ae+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x7775827e+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x98a8a3+63283]\nE       \tGetHandleVerifier [0x0x98a8e4+63348]\nE       \t(No symbol) [0x0x7c3ca0]\nE       \t(No symbol) [0x0x7ffb48]\nE       \t(No symbol) [0x0x8312d6]\nE       \t(No symbol) [0x0x82ceb5]\nE       \t(No symbol) [0x0x82c436]\nE       \t(No symbol) [0x0x795755]\nE       \t(No symbol) [0x0x795cae]\nE       \t(No symbol) [0x0x79613d]\nE       \tGetHandleVerifier [0x0xbfbb43+2623955]\nE       \tGetHandleVerifier [0x0xbf6daa+2604090]\nE       \tGetHandleVerifier [0x0x9b069a+218410]\nE       \tGetHandleVerifier [0x0x9a0ed8+154984]\nE       \tGetHandleVerifier [0x0x9a742d+180925]\nE       \t(No symbol) [0x0x795420]\nE       \t(No symbol) [0x0x794c36]\nE       \tGetHandleVerifier [0x0xd368fc+3913612]\nE       \tBaseThreadInitThunk [0x0x76b9fcc9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x777582ae+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x7775827e+238]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "description": "Test login with correct username and correct password.", "start": 1757308663324, "stop": 1757308663829, "uuid": "bdb2ccda-91b8-4cad-8226-dce330a1e305", "historyId": "73be65653c7801c1b3e9ad3c4844d02f", "testCaseId": "73be65653c7801c1b3e9ad3c4844d02f", "fullName": "tests.test_login#test_login_correct_username_correct_password", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "OTSI-Lap80"}, {"name": "thread", "value": "98356-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}]}