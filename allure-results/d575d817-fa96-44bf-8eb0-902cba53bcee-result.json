{"name": "test_forgotpassword_otp_success_message", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x11ea8a3+63283]\n\tGetHandleVerifier [0x0x11ea8e4+63348]\n\t(No symbol) [0x0x1023e43]\n\t(No symbol) [0x0x106c8de]\n\t(No symbol) [0x0x106cc7b]\n\t(No symbol) [0x0x10b4ef2]\n\t(No symbol) [0x0x1091464]\n\t(No symbol) [0x0x10b271a]\n\t(No symbol) [0x0x1091216]\n\t(No symbol) [0x0x1060855]\n\t(No symbol) [0x0x10616f4]\n\tGetHandleVerifier [0x0x145bb43+2623955]\n\tGetHandleVerifier [0x0x1456daa+2604090]\n\tGetHandleVerifier [0x0x121069a+218410]\n\tGetHandleVerifier [0x0x1200ed8+154984]\n\tGetHandleVerifier [0x0x120742d+180925]\n\tGetHandleVerifier [0x0x11f22b8+94536]\n\tGetHandleVerifier [0x0x11f2442+94930]\n\tGetHandleVerifier [0x0x11dd5ea+9338]\n\tBaseThreadInitThunk [0x0x76b9fcc9+25]\n\tRtlGetAppContainerNamedObjectPath [0x0x777582ae+286]\n\tRtlGetAppContainerNamedObjectPath [0x0x7775827e+238]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"cffae64699915dabc9250da7b0c3d402\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    def test_forgotpassword_otp_success_message(driver):\n        driver.get(config[\"base_url\"])\n        captch_url= config[\"captch_url\"]\n        username = config[\"forgotpassword\"][\"email_5times\"]\n        forgotpass = Forgotpassword(driver)\n        forgotpass.click_forgot_password_link()\n        forgotpass.create_username(username)\n        forgotpass.click_continue_button()\n        forgotpass.capture_otp(username,captch_url)\n>       forgotpass.click_continue_button(times=1)\n\ntests\\test_forgotpassword.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\forgotpassword_page.py:111: in click_continue_button\n    self.wait.until(EC.element_to_be_clickable(self.continue_button)).click()\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"cffae64699915dabc9250da7b0c3d402\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x00000252E7915580>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x11ea8a3+63283]\nE       \tGetHandleVerifier [0x0x11ea8e4+63348]\nE       \t(No symbol) [0x0x1023e43]\nE       \t(No symbol) [0x0x106c8de]\nE       \t(No symbol) [0x0x106cc7b]\nE       \t(No symbol) [0x0x10b4ef2]\nE       \t(No symbol) [0x0x1091464]\nE       \t(No symbol) [0x0x10b271a]\nE       \t(No symbol) [0x0x1091216]\nE       \t(No symbol) [0x0x1060855]\nE       \t(No symbol) [0x0x10616f4]\nE       \tGetHandleVerifier [0x0x145bb43+2623955]\nE       \tGetHandleVerifier [0x0x1456daa+2604090]\nE       \tGetHandleVerifier [0x0x121069a+218410]\nE       \tGetHandleVerifier [0x0x1200ed8+154984]\nE       \tGetHandleVerifier [0x0x120742d+180925]\nE       \tGetHandleVerifier [0x0x11f22b8+94536]\nE       \tGetHandleVerifier [0x0x11f2442+94930]\nE       \tGetHandleVerifier [0x0x11dd5ea+9338]\nE       \tBaseThreadInitThunk [0x0x76b9fcc9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x777582ae+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x7775827e+238]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "attachments": [{"name": "stdout", "source": "bac387fc-f6bd-4db3-91e2-136fe999415f-attachment.txt", "type": "text/plain"}], "start": 1757354574397, "stop": 1757354615871, "uuid": "80c2bc71-fdf7-470c-baa3-466a3b4e97b2", "historyId": "f0f19e1d2d9178d037f04f2da4c39bc3", "testCaseId": "f0f19e1d2d9178d037f04f2da4c39bc3", "fullName": "tests.test_forgotpassword#test_forgotpassword_otp_success_message", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_forgotpassword"}, {"name": "host", "value": "OTSI-Lap80"}, {"name": "thread", "value": "78776-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_forgotpassword"}]}