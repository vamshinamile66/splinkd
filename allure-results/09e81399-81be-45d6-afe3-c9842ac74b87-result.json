{"name": "test_assign_athlete_to_batch", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9c55026e9a04fce0e5bae56abd3ab2ef\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    def test_assign_athlete_to_batch(driver):\n        page = AssignAthletesToBatchPage(driver)\n        # Step 1: Click on Programs tab\n        page.click_program_tab()\n        page.select_and_click_program_name(program_data[\"title\"])\n        page.click_actions_dropdown()\n        page.click_athlete_onboard()\n        # Step 3: Click on Search Athlete button\n        page.click_search_button()\n        # Step 4: Search and select athlete by name\n        page.search_and_select_athlete(\"John\")\n        # Step 5 & 6: Select payment status \"Fully Paid\"\n>       page.select_payment_status_fully_paid()\n\ntests\\test_assign_athletes_to_batch.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\assign_athletes_to_batch_page.py:80: in select_payment_status_fully_paid\n    self.wait.until(EC.invisibility_of_element_located(overlay))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"9c55026e9a04fce0e5bae56abd3ab2ef\")>\nmethod = <function invisibility_of_element_located.<locals>._predicate at 0x000001D02741E340>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "attachments": [{"name": "stdout", "source": "7196f657-cb5e-4592-98aa-c434e284b485-attachment.txt", "type": "text/plain"}], "start": 1756982228702, "stop": 1756982270759, "uuid": "1a3927c8-e49f-4887-ac5d-afece89ce9c8", "historyId": "8cdaf8c00d5fe48c7671c2d70ef56fcd", "testCaseId": "8cdaf8c00d5fe48c7671c2d70ef56fcd", "fullName": "tests.test_assign_athletes_to_batch#test_assign_athlete_to_batch", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_assign_athletes_to_batch"}, {"name": "host", "value": "OTSI-Lap80"}, {"name": "thread", "value": "91352-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_assign_athletes_to_batch"}]}