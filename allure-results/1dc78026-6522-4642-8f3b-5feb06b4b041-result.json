{"name": "test_assign_athlete_to_batch", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x0x6ca8a3+63283]\n\tGetHandleVerifier [0x0x6ca8e4+63348]\n\t(No symbol) [0x0x503ca0]\n\t(No symbol) [0x0x53fb48]\n\t(No symbol) [0x0x5712d6]\n\t(No symbol) [0x0x56ceb5]\n\t(No symbol) [0x0x56c436]\n\t(No symbol) [0x0x4d5755]\n\t(No symbol) [0x0x4d5cae]\n\t(No symbol) [0x0x4d613d]\n\tGetHandleVerifier [0x0x93bb43+2623955]\n\tGetHandleVerifier [0x0x936daa+2604090]\n\tGetHandleVerifier [0x0x6f069a+218410]\n\tGetHandleVerifier [0x0x6e0ed8+154984]\n\tGetHandleVerifier [0x0x6e742d+180925]\n\t(No symbol) [0x0x4d5420]\n\t(No symbol) [0x0x4d4c36]\n\tGetHandleVerifier [0x0xa768fc+3913612]\n\tBaseThreadInitThunk [0x0x761afcc9+25]\n\tRtlGetAppContainerNamedObjectPath [0x0x778c82ae+286]\n\tRtlGetAppContainerNamedObjectPath [0x0x778c827e+238]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f7d93cc201f46870ee119f61f7091b55\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    def test_assign_athlete_to_batch(driver):\n        page = AssignAthletesToBatchPage(driver)\n    \n        # Step 1: Click on Programs tab\n>       page.click_programs_tab()\n\ntests\\test_assign_athletes_to_batch.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\assign_athletes_to_batch_page.py:26: in click_programs_tab\n    self.wait.until(EC.element_to_be_clickable(self.PROGRAMS_TAB)).click()\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:622: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:914: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002581D1CB210>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"\\\\tGetHa...tRtlGetAppContainerNamedObjectPath [0x0x778c82ae+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x778c827e+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x6ca8a3+63283]\nE       \tGetHandleVerifier [0x0x6ca8e4+63348]\nE       \t(No symbol) [0x0x503ca0]\nE       \t(No symbol) [0x0x53fb48]\nE       \t(No symbol) [0x0x5712d6]\nE       \t(No symbol) [0x0x56ceb5]\nE       \t(No symbol) [0x0x56c436]\nE       \t(No symbol) [0x0x4d5755]\nE       \t(No symbol) [0x0x4d5cae]\nE       \t(No symbol) [0x0x4d613d]\nE       \tGetHandleVerifier [0x0x93bb43+2623955]\nE       \tGetHandleVerifier [0x0x936daa+2604090]\nE       \tGetHandleVerifier [0x0x6f069a+218410]\nE       \tGetHandleVerifier [0x0x6e0ed8+154984]\nE       \tGetHandleVerifier [0x0x6e742d+180925]\nE       \t(No symbol) [0x0x4d5420]\nE       \t(No symbol) [0x0x4d4c36]\nE       \tGetHandleVerifier [0x0xa768fc+3913612]\nE       \tBaseThreadInitThunk [0x0x761afcc9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x778c82ae+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x778c827e+238]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "start": 1756572585251, "stop": 1756572585255, "uuid": "ad94d45b-b80c-4484-9ef7-cfca08281afd", "historyId": "8cdaf8c00d5fe48c7671c2d70ef56fcd", "testCaseId": "8cdaf8c00d5fe48c7671c2d70ef56fcd", "fullName": "tests.test_assign_athletes_to_batch#test_assign_athlete_to_batch", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_assign_athletes_to_batch"}, {"name": "host", "value": "OTSI-Lap80"}, {"name": "thread", "value": "57012-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_assign_athletes_to_batch"}]}