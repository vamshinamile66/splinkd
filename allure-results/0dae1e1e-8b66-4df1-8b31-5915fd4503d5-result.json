{"name": "test_mandate_field_validation_errors", "status": "failed", "statusDetails": {"message": "AssertionError: Incorrect error for Name of the Organization/Academy\n  *: Title is required\nassert 'Required' in 'Title is required'", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"731b46c73951278caf7e7857289835e0\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    def test_mandate_field_validation_errors(driver):\n            driver.get(config[\"base_url\"])\n            # Generate a unique email to avoid conflicts\n            captch_url = config[\"captch_url\"]\n            timestamp = int(time.time())\n            username = f\"qa{timestamp}@otsi.co.in\"\n            newpassword = config[\"signup\"][\"newpassword\"]\n            confirm_password = config[\"signup\"][\"confirmpassword\"]\n    \n            # Initialize signup page and perform signup\n            academypage = RegisterAcademyPage(driver)\n            academypage.signup(username, newpassword, confirm_password, captch_url)\n            time.sleep(5)\n            academypage = RegisterAcademyPage(driver)\n            academypage.next_button_click()\n            time.sleep(1)\n    \n            # Capture actual errors\n            errors = academypage.validation_academy_registration()\n            # Load expected from config.json\n            expected_fields = config[\"academy_required_fields\"][\"expected\"]\n    \n            print(\"Expected Errors:\", expected_fields)\n            print(\"Actual Errors:\", errors)\n            # Check that every expected field has a Required error\n            for field in expected_fields:\n                assert field in errors, f\"Missing error for: {field}\"\n>               assert \"Required\" in errors[field], f\"Incorrect error for {field}: {errors[field]}\"\nE               AssertionError: Incorrect error for Name of the Organization/Academy\nE                 *: Title is required\nE               assert 'Required' in 'Title is required'\n\ntests\\test_academy_registration.py:67: AssertionError"}, "attachments": [{"name": "stdout", "source": "7d462740-a4c2-4a78-b1d0-79432a6563ef-attachment.txt", "type": "text/plain"}], "start": 1757169304717, "stop": 1757169338291, "uuid": "fbf38394-14c0-43c8-950a-0a1d787381c6", "historyId": "6c5a0a70a2da4b9b4f8e36a2eff2ad57", "testCaseId": "6c5a0a70a2da4b9b4f8e36a2eff2ad57", "fullName": "tests.test_academy_registration#test_mandate_field_validation_errors", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_academy_registration"}, {"name": "host", "value": "OTSI-Lap80"}, {"name": "thread", "value": "86964-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_academy_registration"}]}