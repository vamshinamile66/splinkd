{"name": "test_create_program[program_data17]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x0x111c333+65459]\n\tGetHandleVerifier [0x0x111c374+65524]\n\t(No symbol) [0x0xf3d7c0]\n\t(No symbol) [0x0xf7a663]\n\t(No symbol) [0x0xfa9cb6]\n\t(No symbol) [0x0xfa555e]\n\t(No symbol) [0x0xfa4ad3]\n\t(No symbol) [0x0xf0e73d]\n\t(No symbol) [0x0xf0ecbe]\n\t(No symbol) [0x0xf0f15d]\n\tGetHandleVerifier [0x0x139eda3+2697763]\n\tGetHandleVerifier [0x0x1399ec7+2677575]\n\tGetHandleVerifier [0x0x1144194+228884]\n\tGetHandleVerifier [0x0x11349f8+165496]\n\tGetHandleVerifier [0x0x113b18d+192013]\n\t(No symbol) [0x0xf0e3f2]\n\t(No symbol) [0x0xf0db72]\n\tGetHandleVerifier [0x0x14f340c+4092044]\n\tBaseThreadInitThunk [0x0x75cbfcc9+25]\n\tRtlGetAppContainerNamedObjectPath [0x0x77ab82ae+286]\n\tRtlGetAppContainerNamedObjectPath [0x0x77ab827e+238]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"0480ccd295f9a4aee1d56a232f5b9225\")>\nprogram_data = {'cover_image_path': 'test_data/images/sample.png', 'description': 'Auto-generated description for Program R', 'price': '118', 'title': 'Program R'}\n\n    @pytest.mark.usefixtures(\"driver\")\n    @pytest.mark.parametrize(\"program_data\", programs)\n    def test_create_program(driver, program_data):\n        page = ProgramsPage(driver)\n    \n        # Step 1: Navigate & click \"Create Program\"\n>       page.click_programs_tab()\n\ntests\\test_programs.py:245: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\programs_page.py:40: in click_programs_tab\n    self.wait.until(EC.element_to_be_clickable(self.programs_tab)).click()\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:622: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:914: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F64E5A3790>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"\\\\tGetHa...tRtlGetAppContainerNamedObjectPath [0x0x77ab82ae+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x77ab827e+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x111c333+65459]\nE       \tGetHandleVerifier [0x0x111c374+65524]\nE       \t(No symbol) [0x0xf3d7c0]\nE       \t(No symbol) [0x0xf7a663]\nE       \t(No symbol) [0x0xfa9cb6]\nE       \t(No symbol) [0x0xfa555e]\nE       \t(No symbol) [0x0xfa4ad3]\nE       \t(No symbol) [0x0xf0e73d]\nE       \t(No symbol) [0x0xf0ecbe]\nE       \t(No symbol) [0x0xf0f15d]\nE       \tGetHandleVerifier [0x0x139eda3+2697763]\nE       \tGetHandleVerifier [0x0x1399ec7+2677575]\nE       \tGetHandleVerifier [0x0x1144194+228884]\nE       \tGetHandleVerifier [0x0x11349f8+165496]\nE       \tGetHandleVerifier [0x0x113b18d+192013]\nE       \t(No symbol) [0x0xf0e3f2]\nE       \t(No symbol) [0x0xf0db72]\nE       \tGetHandleVerifier [0x0x14f340c+4092044]\nE       \tBaseThreadInitThunk [0x0x75cbfcc9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x77ab82ae+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x77ab827e+238]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "parameters": [{"name": "program_data", "value": "{'title': 'Program R', 'description': 'Auto-generated description for Program R', 'price': '118', 'cover_image_path': 'test_data/images/sample.png'}"}], "start": 1758866019059, "stop": 1758866019069, "uuid": "a83f7992-8798-4366-ab3f-250b15487b7d", "historyId": "a93beeac6d78bd63ba651d9b2b9c6312", "testCaseId": "63b9275240e987384cb4ff783d8d6a2a", "fullName": "tests.test_programs#test_create_program", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_programs"}, {"name": "host", "value": "OTSI-Lap80"}, {"name": "thread", "value": "28184-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_programs"}]}