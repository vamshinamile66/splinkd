{"name": "test_create_program[program_data0]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : test_data/images/sample.png\n  (Session info: chrome=140.0.7339.185)\nStacktrace:\n\tGetHandleVerifier [0x0x111c333+65459]\n\tGetHandleVerifier [0x0x111c374+65524]\n\t(No symbol) [0x0xf3d973]\n\t(No symbol) [0x0xf809b9]\n\t(No symbol) [0x0xfa9dfc]\n\t(No symbol) [0x0xf7cbf4]\n\t(No symbol) [0x0xfa9fb4]\n\t(No symbol) [0x0xfcb606]\n\t(No symbol) [0x0xfa9bf6]\n\t(No symbol) [0x0xf7b38e]\n\t(No symbol) [0x0xf7c274]\n\tGetHandleVerifier [0x0x139eda3+2697763]\n\tGetHandleVerifier [0x0x1399ec7+2677575]\n\tGetHandleVerifier [0x0x1144194+228884]\n\tGetHandleVerifier [0x0x11349f8+165496]\n\tGetHandleVerifier [0x0x113b18d+192013]\n\tGetHandleVerifier [0x0x11247d8+99416]\n\tGetHandleVerifier [0x0x1124972+99826]\n\tGetHandleVerifier [0x0x110ebea+10346]\n\tBaseThreadInitThunk [0x0x75cbfcc9+25]\n\tRtlGetAppContainerNamedObjectPath [0x0x77ab82ae+286]\n\tRtlGetAppContainerNamedObjectPath [0x0x77ab827e+238]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"0480ccd295f9a4aee1d56a232f5b9225\")>\nprogram_data = {'cover_image_path': 'test_data/images/sample.png', 'description': 'Auto-generated description for Program A', 'price': '101', 'title': 'Program A'}\n\n    @pytest.mark.usefixtures(\"driver\")\n    @pytest.mark.parametrize(\"program_data\", programs)\n    def test_create_program(driver, program_data):\n        page = ProgramsPage(driver)\n    \n        # Step 1: Navigate & click \"Create Program\"\n        page.click_programs_tab()\n        page.click_create_new_program_button()\n        # Step 2: Enter program details\n        time.sleep(1)\n        page.clear_field(page.program_title_input)\n        time.sleep(1)\n        page.create_program_title(program_data[\"title\"])\n        time.sleep(1)\n        page.clear_field(page.program_desc_input)\n        time.sleep(1)\n        page.create_program_desc(program_data[\"description\"])\n        time.sleep(1)\n        page.clear_field(page.program_price_input)\n        time.sleep(1)\n        page.create_program_price(program_data[\"price\"])\n        page.select_sports_dropdown()\n        page.select_bestfit_level()\n        # Step 3: Go next\n        page.click_next_button()\n        # Step 4: Upload cover image\n>       page.upload_cover_image_and_create(program_data[\"cover_image_path\"])\n\ntests\\test_programs.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\programs_page.py:68: in upload_cover_image_and_create\n    self.wait.until(EC.presence_of_element_located(self.program_cover_image_upload_input)).send_keys(cover_image_path)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:305: in send_keys\n    self._execute(\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F64E5A3790>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: File not found : test_data...tRtlGetAppContainerNamedObjectPath [0x0x77ab82ae+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x77ab827e+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : test_data/images/sample.png\nE         (Session info: chrome=140.0.7339.185)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x111c333+65459]\nE       \tGetHandleVerifier [0x0x111c374+65524]\nE       \t(No symbol) [0x0xf3d973]\nE       \t(No symbol) [0x0xf809b9]\nE       \t(No symbol) [0x0xfa9dfc]\nE       \t(No symbol) [0x0xf7cbf4]\nE       \t(No symbol) [0x0xfa9fb4]\nE       \t(No symbol) [0x0xfcb606]\nE       \t(No symbol) [0x0xfa9bf6]\nE       \t(No symbol) [0x0xf7b38e]\nE       \t(No symbol) [0x0xf7c274]\nE       \tGetHandleVerifier [0x0x139eda3+2697763]\nE       \tGetHandleVerifier [0x0x1399ec7+2677575]\nE       \tGetHandleVerifier [0x0x1144194+228884]\nE       \tGetHandleVerifier [0x0x11349f8+165496]\nE       \tGetHandleVerifier [0x0x113b18d+192013]\nE       \tGetHandleVerifier [0x0x11247d8+99416]\nE       \tGetHandleVerifier [0x0x1124972+99826]\nE       \tGetHandleVerifier [0x0x110ebea+10346]\nE       \tBaseThreadInitThunk [0x0x75cbfcc9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x77ab82ae+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x77ab827e+238]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidArgumentException"}, "attachments": [{"name": "stdout", "source": "f1585127-dbfe-4657-8ca3-3791d00b6788-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "program_data", "value": "{'title': 'Program A', 'description': 'Auto-generated description for Program A', 'price': '101', 'cover_image_path': 'test_data/images/sample.png'}"}], "start": 1758865969159, "stop": 1758865981834, "uuid": "bf3527f6-d17e-4bc2-ac06-16e50b6fa044", "historyId": "73fbc584fb4d6ea0bc9a8d457b7d1a99", "testCaseId": "63b9275240e987384cb4ff783d8d6a2a", "fullName": "tests.test_programs#test_create_program", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_programs"}, {"name": "host", "value": "OTSI-Lap80"}, {"name": "thread", "value": "28184-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_programs"}]}