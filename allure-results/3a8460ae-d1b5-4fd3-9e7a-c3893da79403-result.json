{"name": "test_signup_set_min_pass_validation_error", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x0xc0a8a3+63283]\n\tGetHandleVerifier [0x0xc0a8e4+63348]\n\t(No symbol) [0x0xa43ca0]\n\t(No symbol) [0x0xa7fb48]\n\t(No symbol) [0x0xab12d6]\n\t(No symbol) [0x0xaaceb5]\n\t(No symbol) [0x0xaac436]\n\t(No symbol) [0x0xa15755]\n\t(No symbol) [0x0xa15cae]\n\t(No symbol) [0x0xa1613d]\n\tGetHandleVerifier [0x0xe7bb43+2623955]\n\tGetHandleVerifier [0x0xe76daa+2604090]\n\tGetHandleVerifier [0x0xc3069a+218410]\n\tGetHandleVerifier [0x0xc20ed8+154984]\n\tGetHandleVerifier [0x0xc2742d+180925]\n\t(No symbol) [0x0xa15420]\n\t(No symbol) [0x0xa14c36]\n\tGetHandleVerifier [0x0xfb68fc+3913612]\n\tBaseThreadInitThunk [0x0x75befcc9+25]\n\tRtlGetAppContainerNamedObjectPath [0x0x76f382ae+286]\n\tRtlGetAppContainerNamedObjectPath [0x0x76f3827e+238]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"fc76bd567cb347d9685801b47288645b\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    def test_signup_set_min_pass_validation_error(driver):\n        \"\"\"Validate error when signup password length is less than minimum required.\"\"\"\n        username = signup_value['email']\n        newpassword = config[\"signup\"][\"set_min_pass\"]\n        confirmpassword = config[\"signup\"][\"set_min_pass\"]\n    \n        signup = SignupPage(driver)\n    \n        # Navigate to signup and enter email\n>       signup.click_signup_link()\n\ntests\\test_signup.py:303: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\signup_page.py:27: in click_signup_link\n    self.wait.until(EC.visibility_of_element_located(self.signup_link)).click()\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:217: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:914: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000028FAC63D590>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"\\\\tGetHa...tRtlGetAppContainerNamedObjectPath [0x0x76f382ae+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x76f3827e+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0xc0a8a3+63283]\nE       \tGetHandleVerifier [0x0xc0a8e4+63348]\nE       \t(No symbol) [0x0xa43ca0]\nE       \t(No symbol) [0x0xa7fb48]\nE       \t(No symbol) [0x0xab12d6]\nE       \t(No symbol) [0x0xaaceb5]\nE       \t(No symbol) [0x0xaac436]\nE       \t(No symbol) [0x0xa15755]\nE       \t(No symbol) [0x0xa15cae]\nE       \t(No symbol) [0x0xa1613d]\nE       \tGetHandleVerifier [0x0xe7bb43+2623955]\nE       \tGetHandleVerifier [0x0xe76daa+2604090]\nE       \tGetHandleVerifier [0x0xc3069a+218410]\nE       \tGetHandleVerifier [0x0xc20ed8+154984]\nE       \tGetHandleVerifier [0x0xc2742d+180925]\nE       \t(No symbol) [0x0xa15420]\nE       \t(No symbol) [0x0xa14c36]\nE       \tGetHandleVerifier [0x0xfb68fc+3913612]\nE       \tBaseThreadInitThunk [0x0x75befcc9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x76f382ae+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x76f3827e+238]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "description": "Validate error when signup password length is less than minimum required.", "start": 1757694350064, "stop": 1757694350064, "uuid": "909a1bae-4edd-43cb-93d4-484d64a272fc", "historyId": "af3e6aa5d4a65b2a7fe4b50e41befc87", "testCaseId": "af3e6aa5d4a65b2a7fe4b50e41befc87", "fullName": "tests.test_signup#test_signup_set_min_pass_validation_error", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_signup"}, {"name": "host", "value": "OTSI-Lap80"}, {"name": "thread", "value": "66188-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_signup"}]}