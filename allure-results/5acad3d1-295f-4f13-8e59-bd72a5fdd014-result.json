{"name": "test_onboard_multiple_team_members[member15]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button data-slot=\"sidebar-menu-button\" data-sidebar=\"menu-button\" data-size=\"sp\" data-active=\"true\" class=\"peer/menu-button flex gap-2 p-2 outline-hidden ring-sidebar-ring transition-[width,height,padding] focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&amp;&gt;span:last-child]:truncate [&amp;&gt;svg]:size-4 [&amp;&gt;svg]:shrink-0 md:flex md:flex-col overflow-hidden justify-left md:justify-center items-center [&amp;_a]:flex [&amp;_a]:flex-col [&amp;_a]:items-center [&amp;_svg]:!size-5 border-b hover:bg-primary-gradient cursor-pointer data-[active=true]:bg-primary-gradient rounded-none data-[active=true]:font-normal tracking-wider -ml-[0.5px] *:uppercase font-magistral-cond font-normal text-sm md:text-tiny text-primary hover:text-primary wrap-break-word *:!whitespace-normal text-left md:text-center w-full h-12 md:h-auto md:aspect-auto md:w-22\">...</button> is not clickable at point (54, 481). Other element would receive the click: <div data-state=\"open\" data-slot=\"sheet-overlay\" class=\"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\" data-aria-hidden=\"true\" aria-hidden=\"true\" style=\"pointer-events: auto;\"></div>\n  (Session info: chrome=140.0.7339.185)\nStacktrace:\n\tGetHandleVerifier [0x0x1180c13+66051]\n\tGetHandleVerifier [0x0x1180c54+66116]\n\t(No symbol) [0x0xf5db33]\n\t(No symbol) [0x0xfadd90]\n\t(No symbol) [0x0xfac0f3]\n\t(No symbol) [0x0xfa9ba7]\n\t(No symbol) [0x0xfa8e2d]\n\t(No symbol) [0x0xf9d335]\n\t(No symbol) [0x0xfc9f8c]\n\t(No symbol) [0x0xf9cd94]\n\t(No symbol) [0x0xfca144]\n\t(No symbol) [0x0xfeb7f1]\n\t(No symbol) [0x0xfc9d86]\n\t(No symbol) [0x0xf9b53e]\n\t(No symbol) [0x0xf9c414]\n\tGetHandleVerifier [0x0x13c8a13+2457603]\n\tGetHandleVerifier [0x0x13c39d2+2437058]\n\tGetHandleVerifier [0x0x11a97f2+232930]\n\tGetHandleVerifier [0x0x1199a18+167944]\n\tGetHandleVerifier [0x0x11a092d+196381]\n\tGetHandleVerifier [0x0x1188ee8+99544]\n\tGetHandleVerifier [0x0x1189082+99954]\n\tGetHandleVerifier [0x0x117322a+10266]\n\tBaseThreadInitThunk [0x0x76a9fcc9+25]\n\tRtlGetAppContainerNamedObjectPath [0x0x77b382ae+286]\n\tRtlGetAppContainerNamedObjectPath [0x0x77b3827e+238]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a365b5f31e7a354dac2a1e3206baf751\")>\nmember = {'day': '8', 'email': 'myteam1758281016_15@otsi.co.in', 'first_name': 'sanjay_15', 'last_name': 'damu_15', ...}\n\n    @pytest.mark.usefixtures(\"driver\")\n    @pytest.mark.parametrize(\"member\", members_list)\n    def test_onboard_multiple_team_members(driver, member):\n        page = MyTeamPage(driver)\n>       page.click_my_team_tab()\n\ntests\\test_my_team.py:282: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\my_team_page.py:38: in click_my_team_tab\n    self.wait.until(EC.element_to_be_clickable(self.my_team_tab)).click()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:121: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001902D5BE790>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...tRtlGetAppContainerNamedObjectPath [0x0x77b382ae+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x77b3827e+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button data-slot=\"sidebar-menu-button\" data-sidebar=\"menu-button\" data-size=\"sp\" data-active=\"true\" class=\"peer/menu-button flex gap-2 p-2 outline-hidden ring-sidebar-ring transition-[width,height,padding] focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&amp;&gt;span:last-child]:truncate [&amp;&gt;svg]:size-4 [&amp;&gt;svg]:shrink-0 md:flex md:flex-col overflow-hidden justify-left md:justify-center items-center [&amp;_a]:flex [&amp;_a]:flex-col [&amp;_a]:items-center [&amp;_svg]:!size-5 border-b hover:bg-primary-gradient cursor-pointer data-[active=true]:bg-primary-gradient rounded-none data-[active=true]:font-normal tracking-wider -ml-[0.5px] *:uppercase font-magistral-cond font-normal text-sm md:text-tiny text-primary hover:text-primary wrap-break-word *:!whitespace-normal text-left md:text-center w-full h-12 md:h-auto md:aspect-auto md:w-22\">...</button> is not clickable at point (54, 481). Other element would receive the click: <div data-state=\"open\" data-slot=\"sheet-overlay\" class=\"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\" data-aria-hidden=\"true\" aria-hidden=\"true\" style=\"pointer-events: auto;\"></div>\nE         (Session info: chrome=140.0.7339.185)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x1180c13+66051]\nE       \tGetHandleVerifier [0x0x1180c54+66116]\nE       \t(No symbol) [0x0xf5db33]\nE       \t(No symbol) [0x0xfadd90]\nE       \t(No symbol) [0x0xfac0f3]\nE       \t(No symbol) [0x0xfa9ba7]\nE       \t(No symbol) [0x0xfa8e2d]\nE       \t(No symbol) [0x0xf9d335]\nE       \t(No symbol) [0x0xfc9f8c]\nE       \t(No symbol) [0x0xf9cd94]\nE       \t(No symbol) [0x0xfca144]\nE       \t(No symbol) [0x0xfeb7f1]\nE       \t(No symbol) [0x0xfc9d86]\nE       \t(No symbol) [0x0xf9b53e]\nE       \t(No symbol) [0x0xf9c414]\nE       \tGetHandleVerifier [0x0x13c8a13+2457603]\nE       \tGetHandleVerifier [0x0x13c39d2+2437058]\nE       \tGetHandleVerifier [0x0x11a97f2+232930]\nE       \tGetHandleVerifier [0x0x1199a18+167944]\nE       \tGetHandleVerifier [0x0x11a092d+196381]\nE       \tGetHandleVerifier [0x0x1188ee8+99544]\nE       \tGetHandleVerifier [0x0x1189082+99954]\nE       \tGetHandleVerifier [0x0x117322a+10266]\nE       \tBaseThreadInitThunk [0x0x76a9fcc9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x77b382ae+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x77b3827e+238]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"}, "parameters": [{"name": "member", "value": "{'first_name': 'sanjay_15', 'last_name': 'damu_15', 'month': '8', 'day': '8', 'year': '1985', 'email': 'myteam1758281016_15@otsi.co.in', 'mobile': '9257064401'}"}], "start": 1758281097457, "stop": 1758281098555, "uuid": "f441d8eb-212e-4575-b65d-e9e06e564edf", "historyId": "e49995d8cea802ce8f5f319d95a1138d", "testCaseId": "898adfdd58f7139608b53208b4b8a42b", "fullName": "tests.test_my_team#test_onboard_multiple_team_members", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_my_team"}, {"name": "host", "value": "OTSI-Lap80"}, {"name": "thread", "value": "74352-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_my_team"}]}