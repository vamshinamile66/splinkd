{"name": "test_mandate_field_validation_in_second_page_errors", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a80595e0ca749f0a4c5d0e0621a7cf9c\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    def test_mandate_field_validation_in_second_page_errors(driver):\n            academypage = RegisterAcademyPage(driver)\n            academy = config[\"academy_reg\"]\n            # ---------- Test 2: Location empty validation ----------\n            print(\"Checking location field validations by entering remaining details\")\n>           academypage.academy_name_field(academy[\"academy_name\"])\n\ntests\\test_academy_registration.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\academy_registration_page.py:113: in academy_name_field\n    academy_input = self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"a80595e0ca749f0a4c5d0e0621a7cf9c\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x000001CAD332ACA0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "attachments": [{"name": "stdout", "source": "75323d7c-89f5-4f71-8ece-de64cba7cf24-attachment.txt", "type": "text/plain"}], "start": 1757921064402, "stop": 1757921076787, "uuid": "46ce73e2-7d85-4a28-8839-f86071362d5d", "historyId": "2c981baabaa2ca2ddcaee59f5122e27f", "testCaseId": "2c981baabaa2ca2ddcaee59f5122e27f", "fullName": "tests.test_academy_registration#test_mandate_field_validation_in_second_page_errors", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_academy_registration"}, {"name": "host", "value": "OTSI-Lap80"}, {"name": "thread", "value": "51856-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_academy_registration"}]}