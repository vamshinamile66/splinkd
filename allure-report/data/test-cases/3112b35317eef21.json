{"uid":"3112b35317eef21","name":"test_mandate_field_validation_errors","fullName":"tests.test_academy_registration#test_mandate_field_validation_errors","historyId":"6c5a0a70a2da4b9b4f8e36a2eff2ad57","time":{"start":1757173250306,"stop":1757173254953,"duration":4647},"status":"broken","statusMessage":"AttributeError: 'RegisterAcademyPage' object has no attribute 'normalize_error'","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f8d6aed65dbc1f98d4ff7ceedee80c96\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    def test_mandate_field_validation_errors(driver):\n            academypage = RegisterAcademyPage(driver)\n            academy = config[\"academy_reg\"]\n            academypage.next_button_click()\n            time.sleep(1)\n            # Capture actual errors\n>           errors = academypage.validation_academy_registration()\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests\\test_academy_registration.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.academy_registration_page.RegisterAcademyPage object at 0x000002057F837110>\n\n    def validation_academy_registration(self):\n              \"\"\"\n              Collects validation errors from Academy Registration form.\n              Returns dictionary: {field_label: error_message}\n              \"\"\"\n              errors = {}\n              error_elements = self.driver.find_elements(By.CSS_SELECTOR, \"p.text-destructive\")\n    \n              for elem in error_elements:\n                  error_text = elem.text.strip()\n                  if not error_text:\n                      continue\n    \n                  # Find the nearest input/label above the error message\n                  field_name = \"Unknown field\"\n                  try:\n                      label_elem = elem.find_element(By.XPATH, \"./preceding::label[1]\")\n                      field_name = label_elem.text.strip()\n                  except:\n                      try:\n                          input_elem = elem.find_element(By.XPATH, \"./preceding::input[1]\")\n                          field_name = input_elem.get_attribute(\"placeholder\") or \"Unknown field\"\n                      except:\n                          pass\n    \n                  errors[field_name] = error_text\n                  print(\"Mandatory field validations are captured:\")\n                  print(f\"{field_name}: {error_text}\")\n                   # ✅ normalize the error before storing\n>                 normalized = self.normalize_error(error_text)\n                               ^^^^^^^^^^^^^^^^^^^^\nE                 AttributeError: 'RegisterAcademyPage' object has no attribute 'normalize_error'\n\npages\\academy_registration_page.py:231: AttributeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1757173211201,"stop":1757173216390,"duration":5189},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"AttributeError: 'RegisterAcademyPage' object has no attribute 'normalize_error'","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f8d6aed65dbc1f98d4ff7ceedee80c96\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    def test_mandate_field_validation_errors(driver):\n            academypage = RegisterAcademyPage(driver)\n            academy = config[\"academy_reg\"]\n            academypage.next_button_click()\n            time.sleep(1)\n            # Capture actual errors\n>           errors = academypage.validation_academy_registration()\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests\\test_academy_registration.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.academy_registration_page.RegisterAcademyPage object at 0x000002057F837110>\n\n    def validation_academy_registration(self):\n              \"\"\"\n              Collects validation errors from Academy Registration form.\n              Returns dictionary: {field_label: error_message}\n              \"\"\"\n              errors = {}\n              error_elements = self.driver.find_elements(By.CSS_SELECTOR, \"p.text-destructive\")\n    \n              for elem in error_elements:\n                  error_text = elem.text.strip()\n                  if not error_text:\n                      continue\n    \n                  # Find the nearest input/label above the error message\n                  field_name = \"Unknown field\"\n                  try:\n                      label_elem = elem.find_element(By.XPATH, \"./preceding::label[1]\")\n                      field_name = label_elem.text.strip()\n                  except:\n                      try:\n                          input_elem = elem.find_element(By.XPATH, \"./preceding::input[1]\")\n                          field_name = input_elem.get_attribute(\"placeholder\") or \"Unknown field\"\n                      except:\n                          pass\n    \n                  errors[field_name] = error_text\n                  print(\"Mandatory field validations are captured:\")\n                  print(f\"{field_name}: {error_text}\")\n                   # ✅ normalize the error before storing\n>                 normalized = self.normalize_error(error_text)\n                               ^^^^^^^^^^^^^^^^^^^^\nE                 AttributeError: 'RegisterAcademyPage' object has no attribute 'normalize_error'\n\npages\\academy_registration_page.py:231: AttributeError","steps":[],"attachments":[{"uid":"5efa0f3c64c4c980","name":"stdout","source":"5efa0f3c64c4c980.txt","type":"text/plain","size":142}],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":1},"afterStages":[{"name":"driver::0","time":{"start":1757173255385,"stop":1757173258571,"duration":3186},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_academy_registration"},{"name":"host","value":"OTSI-Lap80"},{"name":"thread","value":"66120-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_academy_registration"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"3112b35317eef21.json","parameterValues":[]}