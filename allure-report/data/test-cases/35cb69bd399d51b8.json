{"uid":"35cb69bd399d51b8","name":"test_login_correct_username_incorrect_password","fullName":"tests.test_login#test_login_correct_username_incorrect_password","historyId":"d3743d5d9d3856212658b7472d60eb62","time":{"start":1757255834424,"stop":1757255866928,"duration":32504},"description":"Test login with correct username and incorrect password.","descriptionHtml":"<p>Test login with correct username and incorrect password.</p>\n","status":"failed","statusMessage":"AssertionError: assert '' == 'your password is incorrect'\n  \n  \u001B[0m\u001B[91m- your password is incorrect\u001B[39;49;00m\u001B[90m\u001B[39;49;00m","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5e1d28b9019ec9e12bea4b17259ef070\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    def test_login_correct_username_incorrect_password(driver):\n        \"\"\"Test login with correct username and incorrect password.\"\"\"\n        driver.get(config[\"base_url\"])\n        time.sleep(1)\n        username = config[\"username\"]\n        password = \"wrongpassword\"\n    \n        login_page = LoginPage(driver)\n        login_page.login(username, password)\n    \n        time.sleep(1)\n    \n        assert not login_page.is_logged_in(),\"Login succeeded with correct username and incorrect password\"\n        # Wait for the toast message to appear and extract it\n        from selenium.common.exceptions import TimeoutException\n        wait = WebDriverWait(driver, 10)\n    \n        try:\n            # Wait for presence of the error message element (same selector as other test)\n            error_element = wait.until(\n                EC.presence_of_element_located((By.CSS_SELECTOR, 'p[data-slot=\"form-message\"]'))\n            )\n            WebDriverWait(driver, 5).until(lambda d: error_element.is_displayed())\n            actual_error_message = error_element.text.strip()\n        except TimeoutException:\n            actual_error_message = \"\"\n            print(\" Error message not found within timeout.\")\n            print(\"actual error message:\", actual_error_message)\n        expected_invalid_password_error_message = config[\"expected_invalid_password_error_message\"]\n        print(f\"Expected error message: '{expected_invalid_password_error_message}'\")\n        print(\"Captured error message:\", actual_error_message)\n>       assert actual_error_message == expected_invalid_password_error_message\nE       AssertionError: assert '' == 'your password is incorrect'\nE         \nE         \u001B[0m\u001B[91m- your password is incorrect\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n\ntests\\test_login.py:46: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1757255829113,"stop":1757255834423,"duration":5310},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"description":"Test login with correct username and incorrect password.","status":"failed","statusMessage":"AssertionError: assert '' == 'your password is incorrect'\n  \n  \u001B[0m\u001B[91m- your password is incorrect\u001B[39;49;00m\u001B[90m\u001B[39;49;00m","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5e1d28b9019ec9e12bea4b17259ef070\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    def test_login_correct_username_incorrect_password(driver):\n        \"\"\"Test login with correct username and incorrect password.\"\"\"\n        driver.get(config[\"base_url\"])\n        time.sleep(1)\n        username = config[\"username\"]\n        password = \"wrongpassword\"\n    \n        login_page = LoginPage(driver)\n        login_page.login(username, password)\n    \n        time.sleep(1)\n    \n        assert not login_page.is_logged_in(),\"Login succeeded with correct username and incorrect password\"\n        # Wait for the toast message to appear and extract it\n        from selenium.common.exceptions import TimeoutException\n        wait = WebDriverWait(driver, 10)\n    \n        try:\n            # Wait for presence of the error message element (same selector as other test)\n            error_element = wait.until(\n                EC.presence_of_element_located((By.CSS_SELECTOR, 'p[data-slot=\"form-message\"]'))\n            )\n            WebDriverWait(driver, 5).until(lambda d: error_element.is_displayed())\n            actual_error_message = error_element.text.strip()\n        except TimeoutException:\n            actual_error_message = \"\"\n            print(\" Error message not found within timeout.\")\n            print(\"actual error message:\", actual_error_message)\n        expected_invalid_password_error_message = config[\"expected_invalid_password_error_message\"]\n        print(f\"Expected error message: '{expected_invalid_password_error_message}'\")\n        print(\"Captured error message:\", actual_error_message)\n>       assert actual_error_message == expected_invalid_password_error_message\nE       AssertionError: assert '' == 'your password is incorrect'\nE         \nE         \u001B[0m\u001B[91m- your password is incorrect\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n\ntests\\test_login.py:46: AssertionError","steps":[],"attachments":[{"uid":"5c2ba6a54ccc4006","name":"stdout","source":"5c2ba6a54ccc4006.txt","type":"text/plain","size":142}],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":1},"afterStages":[{"name":"driver::0","time":{"start":1757255913773,"stop":1757255916097,"duration":2324},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_login"},{"name":"host","value":"OTSI-Lap80"},{"name":"thread","value":"70228-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"35cb69bd399d51b8.json","parameterValues":[]}