{"uid":"55d15bfbd4c45b4d","name":"test_login_incorrect_username_correct_password","fullName":"tests.test_login#test_login_incorrect_username_correct_password","historyId":"1658a3ffc3089ee50cab31ced9f49cf2","time":{"start":1757255867414,"stop":1757255885740,"duration":18326},"description":"Test login with incorrect username and correct password and check error message.","descriptionHtml":"<p>Test login with incorrect username and correct password and check error message.</p>\n","status":"failed","statusMessage":"AssertionError: Expected error message 'Invalid email', got 'Invalid Email'\nassert 'Invalid Email' == 'Invalid email'\n  \n  \u001B[0m\u001B[91m- Invalid email\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  ?         ^\u001B[90m\u001B[39;49;00m\n  \u001B[92m+ Invalid Email\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  ?         ^\u001B[90m\u001B[39;49;00m","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5e1d28b9019ec9e12bea4b17259ef070\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    def test_login_incorrect_username_correct_password(driver):\n        \"\"\"Test login with incorrect username and correct password and check error message.\"\"\"\n        driver.get(config[\"base_url\"])\n        time.sleep(1)\n        username = \"invalid_user\"\n        password = config[\"password\"]\n    \n        login_page = LoginPage(driver)\n        login_page.login(username, password)\n    \n        time.sleep(1)\n    \n        assert not login_page.is_logged_in(), \"Login succeeded with incorrect username and correct password\"\n        # Capture the error message displayed on the page\n        error_element = driver.find_element(\"css selector\", 'p[data-slot=\"form-message\"]')\n        actual_error_message = error_element.text\n        expected_invalid_mail_error_message = config[\"expected_invalid_mail_error_message\"]\n        print(f\"Actual error message: '{actual_error_message}'\")\n>       assert actual_error_message == expected_invalid_mail_error_message, f\"Expected error message '{expected_invalid_mail_error_message}', got '{actual_error_message}'\"\nE       AssertionError: Expected error message 'Invalid email', got 'Invalid Email'\nE       assert 'Invalid Email' == 'Invalid email'\nE         \nE         \u001B[0m\u001B[91m- Invalid email\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE         ?         ^\u001B[90m\u001B[39;49;00m\nE         \u001B[92m+ Invalid Email\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE         ?         ^\u001B[90m\u001B[39;49;00m\n\ntests\\test_login.py:68: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1757255829113,"stop":1757255834423,"duration":5310},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"description":"Test login with incorrect username and correct password and check error message.","status":"failed","statusMessage":"AssertionError: Expected error message 'Invalid email', got 'Invalid Email'\nassert 'Invalid Email' == 'Invalid email'\n  \n  \u001B[0m\u001B[91m- Invalid email\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  ?         ^\u001B[90m\u001B[39;49;00m\n  \u001B[92m+ Invalid Email\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\n  ?         ^\u001B[90m\u001B[39;49;00m","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5e1d28b9019ec9e12bea4b17259ef070\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    def test_login_incorrect_username_correct_password(driver):\n        \"\"\"Test login with incorrect username and correct password and check error message.\"\"\"\n        driver.get(config[\"base_url\"])\n        time.sleep(1)\n        username = \"invalid_user\"\n        password = config[\"password\"]\n    \n        login_page = LoginPage(driver)\n        login_page.login(username, password)\n    \n        time.sleep(1)\n    \n        assert not login_page.is_logged_in(), \"Login succeeded with incorrect username and correct password\"\n        # Capture the error message displayed on the page\n        error_element = driver.find_element(\"css selector\", 'p[data-slot=\"form-message\"]')\n        actual_error_message = error_element.text\n        expected_invalid_mail_error_message = config[\"expected_invalid_mail_error_message\"]\n        print(f\"Actual error message: '{actual_error_message}'\")\n>       assert actual_error_message == expected_invalid_mail_error_message, f\"Expected error message '{expected_invalid_mail_error_message}', got '{actual_error_message}'\"\nE       AssertionError: Expected error message 'Invalid email', got 'Invalid Email'\nE       assert 'Invalid Email' == 'Invalid email'\nE         \nE         \u001B[0m\u001B[91m- Invalid email\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE         ?         ^\u001B[90m\u001B[39;49;00m\nE         \u001B[92m+ Invalid Email\u001B[39;49;00m\u001B[90m\u001B[39;49;00m\nE         ?         ^\u001B[90m\u001B[39;49;00m\n\ntests\\test_login.py:68: AssertionError","steps":[],"attachments":[{"uid":"735afc43ac7e6f8a","name":"stdout","source":"735afc43ac7e6f8a.txt","type":"text/plain","size":38}],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":1},"afterStages":[{"name":"driver::0","time":{"start":1757255913773,"stop":1757255916097,"duration":2324},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_login"},{"name":"host","value":"OTSI-Lap80"},{"name":"thread","value":"70228-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"55d15bfbd4c45b4d.json","parameterValues":[]}