{"uid":"248617c6e0b4bd57","name":"test_assign_coach_to_batch","fullName":"tests.test_assign_coach_to_batch#test_assign_coach_to_batch","historyId":"383341f4f0142fd9ffef07e59b95b5fc","time":{"start":1756980309536,"stop":1756980326067,"duration":16531},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: chrome=139.0.7258.155)\nStacktrace:\n\tGetHandleVerifier [0x0x124a8a3+63283]\n\tGetHandleVerifier [0x0x124a8e4+63348]\n\t(No symbol) [0x0x1083e43]\n\t(No symbol) [0x0x1073790]\n\t(No symbol) [0x0x1091602]\n\t(No symbol) [0x0x10f7cdc]\n\t(No symbol) [0x0x1111ff9]\n\t(No symbol) [0x0x10f1216]\n\t(No symbol) [0x0x10c0855]\n\t(No symbol) [0x0x10c16f4]\n\tGetHandleVerifier [0x0x14bbb43+2623955]\n\tGetHandleVerifier [0x0x14b6daa+2604090]\n\tGetHandleVerifier [0x0x127069a+218410]\n\tGetHandleVerifier [0x0x1260ed8+154984]\n\tGetHandleVerifier [0x0x126742d+180925]\n\tGetHandleVerifier [0x0x12522b8+94536]\n\tGetHandleVerifier [0x0x1252442+94930]\n\tGetHandleVerifier [0x0x123d5ea+9338]\n\tBaseThreadInitThunk [0x0x76b9fcc9+25]\n\tRtlGetAppContainerNamedObjectPath [0x0x777582ae+286]\n\tRtlGetAppContainerNamedObjectPath [0x0x7775827e+238]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"98d8d972474e300083a54d3472f1c6e5\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    def test_assign_coach_to_batch(driver):\n        page = AssignCoachToBatchPage(driver)\n    \n        # Step 1: Click on program tab\n        page.click_program_tab()\n        page.select_and_click_program_name(program_data[\"title\"])\n        page.click_coaches_tab()\n    \n        # Step 2: Click on internal 'Coaches' tab\n>       page.click_add_coach_button()\n\ntests\\test_assign_coach_to_batch.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\assign_coach_to_batch_page.py:58: in click_add_coach_button\n    self.wait.until(EC.element_to_be_clickable(self.ADD_COACH_BUTTON)).click()\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:622: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:914: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000019B8C6DF6D0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...tRtlGetAppContainerNamedObjectPath [0x0x777582ae+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x7775827e+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=139.0.7258.155)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x124a8a3+63283]\nE       \tGetHandleVerifier [0x0x124a8e4+63348]\nE       \t(No symbol) [0x0x1083e43]\nE       \t(No symbol) [0x0x1073790]\nE       \t(No symbol) [0x0x1091602]\nE       \t(No symbol) [0x0x10f7cdc]\nE       \t(No symbol) [0x0x1111ff9]\nE       \t(No symbol) [0x0x10f1216]\nE       \t(No symbol) [0x0x10c0855]\nE       \t(No symbol) [0x0x10c16f4]\nE       \tGetHandleVerifier [0x0x14bbb43+2623955]\nE       \tGetHandleVerifier [0x0x14b6daa+2604090]\nE       \tGetHandleVerifier [0x0x127069a+218410]\nE       \tGetHandleVerifier [0x0x1260ed8+154984]\nE       \tGetHandleVerifier [0x0x126742d+180925]\nE       \tGetHandleVerifier [0x0x12522b8+94536]\nE       \tGetHandleVerifier [0x0x1252442+94930]\nE       \tGetHandleVerifier [0x0x123d5ea+9338]\nE       \tBaseThreadInitThunk [0x0x76b9fcc9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x777582ae+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x7775827e+238]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1756980290365,"stop":1756980295271,"duration":4906},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: chrome=139.0.7258.155)\nStacktrace:\n\tGetHandleVerifier [0x0x124a8a3+63283]\n\tGetHandleVerifier [0x0x124a8e4+63348]\n\t(No symbol) [0x0x1083e43]\n\t(No symbol) [0x0x1073790]\n\t(No symbol) [0x0x1091602]\n\t(No symbol) [0x0x10f7cdc]\n\t(No symbol) [0x0x1111ff9]\n\t(No symbol) [0x0x10f1216]\n\t(No symbol) [0x0x10c0855]\n\t(No symbol) [0x0x10c16f4]\n\tGetHandleVerifier [0x0x14bbb43+2623955]\n\tGetHandleVerifier [0x0x14b6daa+2604090]\n\tGetHandleVerifier [0x0x127069a+218410]\n\tGetHandleVerifier [0x0x1260ed8+154984]\n\tGetHandleVerifier [0x0x126742d+180925]\n\tGetHandleVerifier [0x0x12522b8+94536]\n\tGetHandleVerifier [0x0x1252442+94930]\n\tGetHandleVerifier [0x0x123d5ea+9338]\n\tBaseThreadInitThunk [0x0x76b9fcc9+25]\n\tRtlGetAppContainerNamedObjectPath [0x0x777582ae+286]\n\tRtlGetAppContainerNamedObjectPath [0x0x7775827e+238]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"98d8d972474e300083a54d3472f1c6e5\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    def test_assign_coach_to_batch(driver):\n        page = AssignCoachToBatchPage(driver)\n    \n        # Step 1: Click on program tab\n        page.click_program_tab()\n        page.select_and_click_program_name(program_data[\"title\"])\n        page.click_coaches_tab()\n    \n        # Step 2: Click on internal 'Coaches' tab\n>       page.click_add_coach_button()\n\ntests\\test_assign_coach_to_batch.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\assign_coach_to_batch_page.py:58: in click_add_coach_button\n    self.wait.until(EC.element_to_be_clickable(self.ADD_COACH_BUTTON)).click()\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:622: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:914: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000019B8C6DF6D0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...tRtlGetAppContainerNamedObjectPath [0x0x777582ae+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x7775827e+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=139.0.7258.155)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x124a8a3+63283]\nE       \tGetHandleVerifier [0x0x124a8e4+63348]\nE       \t(No symbol) [0x0x1083e43]\nE       \t(No symbol) [0x0x1073790]\nE       \t(No symbol) [0x0x1091602]\nE       \t(No symbol) [0x0x10f7cdc]\nE       \t(No symbol) [0x0x1111ff9]\nE       \t(No symbol) [0x0x10f1216]\nE       \t(No symbol) [0x0x10c0855]\nE       \t(No symbol) [0x0x10c16f4]\nE       \tGetHandleVerifier [0x0x14bbb43+2623955]\nE       \tGetHandleVerifier [0x0x14b6daa+2604090]\nE       \tGetHandleVerifier [0x0x127069a+218410]\nE       \tGetHandleVerifier [0x0x1260ed8+154984]\nE       \tGetHandleVerifier [0x0x126742d+180925]\nE       \tGetHandleVerifier [0x0x12522b8+94536]\nE       \tGetHandleVerifier [0x0x1252442+94930]\nE       \tGetHandleVerifier [0x0x123d5ea+9338]\nE       \tBaseThreadInitThunk [0x0x76b9fcc9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x777582ae+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x7775827e+238]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException","steps":[],"attachments":[{"uid":"e760494b05c48373","name":"stdout","source":"e760494b05c48373.txt","type":"text/plain","size":145}],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":1},"afterStages":[{"name":"driver::0","time":{"start":1756980326656,"stop":1756980328682,"duration":2026},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_assign_coach_to_batch"},{"name":"host","value":"OTSI-Lap80"},{"name":"thread","value":"89056-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_assign_coach_to_batch"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"248617c6e0b4bd57.json","parameterValues":[]}