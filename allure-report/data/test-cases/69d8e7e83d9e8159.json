{"uid":"69d8e7e83d9e8159","name":"test_assign_athlete_to_batch","fullName":"tests.test_assign_athletes_to_batch#test_assign_athlete_to_batch","historyId":"8cdaf8c00d5fe48c7671c2d70ef56fcd","time":{"start":1756995792154,"stop":1756995808184,"duration":16030},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button data-slot=\"button\" class=\"inline-flex items-center justify-center gap-2 whitespace-nowrap text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&amp;_svg]:pointer-events-none [&amp;_svg:not([class*='size-'])]:size-4 shrink-0 [&amp;_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-[1px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive bg-primary text-primary-foreground shadow-xs hover:bg-primary/80 focus-visible:ring-primary/20 hover:ring h-9 px-2 py-2 has-[&gt;svg]:px-3 cursor-pointer md:px-3\" type=\"submit\">...</button> is not clickable at point (953, 609). Other element would receive the click: <div data-state=\"open\" data-slot=\"sheet-overlay\" class=\"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\" data-aria-hidden=\"true\" aria-hidden=\"true\" style=\"pointer-events: auto;\"></div>\n  (Session info: chrome=139.0.7258.155)\nStacktrace:\n\tGetHandleVerifier [0x0x82a8a3+63283]\n\tGetHandleVerifier [0x0x82a8e4+63348]\n\t(No symbol) [0x0x663e43]\n\t(No symbol) [0x0x6b2c20]\n\t(No symbol) [0x0x6b0fda]\n\t(No symbol) [0x0x6aeb37]\n\t(No symbol) [0x0x6addf4]\n\t(No symbol) [0x0x6a25b5]\n\t(No symbol) [0x0x6d141c]\n\t(No symbol) [0x0x6a2044]\n\t(No symbol) [0x0x6d1694]\n\t(No symbol) [0x0x6f271a]\n\t(No symbol) [0x0x6d1216]\n\t(No symbol) [0x0x6a0855]\n\t(No symbol) [0x0x6a16f4]\n\tGetHandleVerifier [0x0xa9bb43+2623955]\n\tGetHandleVerifier [0x0xa96daa+2604090]\n\tGetHandleVerifier [0x0x85069a+218410]\n\tGetHandleVerifier [0x0x840ed8+154984]\n\tGetHandleVerifier [0x0x84742d+180925]\n\tGetHandleVerifier [0x0x8322b8+94536]\n\tGetHandleVerifier [0x0x832442+94930]\n\tGetHandleVerifier [0x0x81d5ea+9338]\n\tBaseThreadInitThunk [0x0x76b9fcc9+25]\n\tRtlGetAppContainerNamedObjectPath [0x0x777582ae+286]\n\tRtlGetAppContainerNamedObjectPath [0x0x7775827e+238]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1220178386b2d396888d2effd9821545\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    def test_assign_athlete_to_batch(driver):\n        page = AssignAthletesToBatchPage(driver)\n        # Step 1: Click on Programs tab\n        page.click_program_tab()\n        page.select_and_click_program_name(program_data[\"title\"])\n        page.click_actions_dropdown()\n        page.click_athlete_onboard()\n        # Step 3: Click on Search Athlete button\n        page.click_search_button()\n        # Step 4: Search and select athlete by name\n        page.search_and_select_athlete(\"John\")\n        # Step 5 & 6: Select payment status \"Fully Paid\"\n        page.click_drop_down_button()\n        # page.select_payment_status(\"paid_till_next_due\")\n        page.select_payment()\n        # Step 7: Click on Add Athlete submit\n>       page.click_add_athlete_submit()\n\ntests\\test_assign_athletes_to_batch.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\assign_athletes_to_batch_page.py:106: in click_add_athlete_submit\n    self.wait.until(EC.element_to_be_clickable(self.ADD_ATHLETE_SUBMIT)).click()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:121: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002028F6C9650>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...tRtlGetAppContainerNamedObjectPath [0x0x777582ae+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x7775827e+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button data-slot=\"button\" class=\"inline-flex items-center justify-center gap-2 whitespace-nowrap text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&amp;_svg]:pointer-events-none [&amp;_svg:not([class*='size-'])]:size-4 shrink-0 [&amp;_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-[1px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive bg-primary text-primary-foreground shadow-xs hover:bg-primary/80 focus-visible:ring-primary/20 hover:ring h-9 px-2 py-2 has-[&gt;svg]:px-3 cursor-pointer md:px-3\" type=\"submit\">...</button> is not clickable at point (953, 609). Other element would receive the click: <div data-state=\"open\" data-slot=\"sheet-overlay\" class=\"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\" data-aria-hidden=\"true\" aria-hidden=\"true\" style=\"pointer-events: auto;\"></div>\nE         (Session info: chrome=139.0.7258.155)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x82a8a3+63283]\nE       \tGetHandleVerifier [0x0x82a8e4+63348]\nE       \t(No symbol) [0x0x663e43]\nE       \t(No symbol) [0x0x6b2c20]\nE       \t(No symbol) [0x0x6b0fda]\nE       \t(No symbol) [0x0x6aeb37]\nE       \t(No symbol) [0x0x6addf4]\nE       \t(No symbol) [0x0x6a25b5]\nE       \t(No symbol) [0x0x6d141c]\nE       \t(No symbol) [0x0x6a2044]\nE       \t(No symbol) [0x0x6d1694]\nE       \t(No symbol) [0x0x6f271a]\nE       \t(No symbol) [0x0x6d1216]\nE       \t(No symbol) [0x0x6a0855]\nE       \t(No symbol) [0x0x6a16f4]\nE       \tGetHandleVerifier [0x0xa9bb43+2623955]\nE       \tGetHandleVerifier [0x0xa96daa+2604090]\nE       \tGetHandleVerifier [0x0x85069a+218410]\nE       \tGetHandleVerifier [0x0x840ed8+154984]\nE       \tGetHandleVerifier [0x0x84742d+180925]\nE       \tGetHandleVerifier [0x0x8322b8+94536]\nE       \tGetHandleVerifier [0x0x832442+94930]\nE       \tGetHandleVerifier [0x0x81d5ea+9338]\nE       \tBaseThreadInitThunk [0x0x76b9fcc9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x777582ae+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x7775827e+238]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1756995771933,"stop":1756995777180,"duration":5247},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button data-slot=\"button\" class=\"inline-flex items-center justify-center gap-2 whitespace-nowrap text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&amp;_svg]:pointer-events-none [&amp;_svg:not([class*='size-'])]:size-4 shrink-0 [&amp;_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-[1px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive bg-primary text-primary-foreground shadow-xs hover:bg-primary/80 focus-visible:ring-primary/20 hover:ring h-9 px-2 py-2 has-[&gt;svg]:px-3 cursor-pointer md:px-3\" type=\"submit\">...</button> is not clickable at point (953, 609). Other element would receive the click: <div data-state=\"open\" data-slot=\"sheet-overlay\" class=\"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\" data-aria-hidden=\"true\" aria-hidden=\"true\" style=\"pointer-events: auto;\"></div>\n  (Session info: chrome=139.0.7258.155)\nStacktrace:\n\tGetHandleVerifier [0x0x82a8a3+63283]\n\tGetHandleVerifier [0x0x82a8e4+63348]\n\t(No symbol) [0x0x663e43]\n\t(No symbol) [0x0x6b2c20]\n\t(No symbol) [0x0x6b0fda]\n\t(No symbol) [0x0x6aeb37]\n\t(No symbol) [0x0x6addf4]\n\t(No symbol) [0x0x6a25b5]\n\t(No symbol) [0x0x6d141c]\n\t(No symbol) [0x0x6a2044]\n\t(No symbol) [0x0x6d1694]\n\t(No symbol) [0x0x6f271a]\n\t(No symbol) [0x0x6d1216]\n\t(No symbol) [0x0x6a0855]\n\t(No symbol) [0x0x6a16f4]\n\tGetHandleVerifier [0x0xa9bb43+2623955]\n\tGetHandleVerifier [0x0xa96daa+2604090]\n\tGetHandleVerifier [0x0x85069a+218410]\n\tGetHandleVerifier [0x0x840ed8+154984]\n\tGetHandleVerifier [0x0x84742d+180925]\n\tGetHandleVerifier [0x0x8322b8+94536]\n\tGetHandleVerifier [0x0x832442+94930]\n\tGetHandleVerifier [0x0x81d5ea+9338]\n\tBaseThreadInitThunk [0x0x76b9fcc9+25]\n\tRtlGetAppContainerNamedObjectPath [0x0x777582ae+286]\n\tRtlGetAppContainerNamedObjectPath [0x0x7775827e+238]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1220178386b2d396888d2effd9821545\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    def test_assign_athlete_to_batch(driver):\n        page = AssignAthletesToBatchPage(driver)\n        # Step 1: Click on Programs tab\n        page.click_program_tab()\n        page.select_and_click_program_name(program_data[\"title\"])\n        page.click_actions_dropdown()\n        page.click_athlete_onboard()\n        # Step 3: Click on Search Athlete button\n        page.click_search_button()\n        # Step 4: Search and select athlete by name\n        page.search_and_select_athlete(\"John\")\n        # Step 5 & 6: Select payment status \"Fully Paid\"\n        page.click_drop_down_button()\n        # page.select_payment_status(\"paid_till_next_due\")\n        page.select_payment()\n        # Step 7: Click on Add Athlete submit\n>       page.click_add_athlete_submit()\n\ntests\\test_assign_athletes_to_batch.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\assign_athletes_to_batch_page.py:106: in click_add_athlete_submit\n    self.wait.until(EC.element_to_be_clickable(self.ADD_ATHLETE_SUBMIT)).click()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:121: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002028F6C9650>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...tRtlGetAppContainerNamedObjectPath [0x0x777582ae+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x7775827e+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button data-slot=\"button\" class=\"inline-flex items-center justify-center gap-2 whitespace-nowrap text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&amp;_svg]:pointer-events-none [&amp;_svg:not([class*='size-'])]:size-4 shrink-0 [&amp;_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-[1px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive bg-primary text-primary-foreground shadow-xs hover:bg-primary/80 focus-visible:ring-primary/20 hover:ring h-9 px-2 py-2 has-[&gt;svg]:px-3 cursor-pointer md:px-3\" type=\"submit\">...</button> is not clickable at point (953, 609). Other element would receive the click: <div data-state=\"open\" data-slot=\"sheet-overlay\" class=\"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\" data-aria-hidden=\"true\" aria-hidden=\"true\" style=\"pointer-events: auto;\"></div>\nE         (Session info: chrome=139.0.7258.155)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x82a8a3+63283]\nE       \tGetHandleVerifier [0x0x82a8e4+63348]\nE       \t(No symbol) [0x0x663e43]\nE       \t(No symbol) [0x0x6b2c20]\nE       \t(No symbol) [0x0x6b0fda]\nE       \t(No symbol) [0x0x6aeb37]\nE       \t(No symbol) [0x0x6addf4]\nE       \t(No symbol) [0x0x6a25b5]\nE       \t(No symbol) [0x0x6d141c]\nE       \t(No symbol) [0x0x6a2044]\nE       \t(No symbol) [0x0x6d1694]\nE       \t(No symbol) [0x0x6f271a]\nE       \t(No symbol) [0x0x6d1216]\nE       \t(No symbol) [0x0x6a0855]\nE       \t(No symbol) [0x0x6a16f4]\nE       \tGetHandleVerifier [0x0xa9bb43+2623955]\nE       \tGetHandleVerifier [0x0xa96daa+2604090]\nE       \tGetHandleVerifier [0x0x85069a+218410]\nE       \tGetHandleVerifier [0x0x840ed8+154984]\nE       \tGetHandleVerifier [0x0x84742d+180925]\nE       \tGetHandleVerifier [0x0x8322b8+94536]\nE       \tGetHandleVerifier [0x0x832442+94930]\nE       \tGetHandleVerifier [0x0x81d5ea+9338]\nE       \tBaseThreadInitThunk [0x0x76b9fcc9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x777582ae+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x7775827e+238]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException","steps":[],"attachments":[{"uid":"a540c7f8d4d75a86","name":"stdout","source":"a540c7f8d4d75a86.txt","type":"text/plain","size":204}],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":1},"afterStages":[{"name":"driver::0","time":{"start":1756995808629,"stop":1756995811520,"duration":2891},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_assign_athletes_to_batch"},{"name":"host","value":"OTSI-Lap80"},{"name":"thread","value":"85444-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_assign_athletes_to_batch"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"69d8e7e83d9e8159.json","parameterValues":[]}